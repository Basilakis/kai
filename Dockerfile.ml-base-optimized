# Optimized ML Base Image - Consolidates GPU and ML dependencies
# Multi-stage build for reduced image size and improved caching

# Stage 1: Base CUDA environment
FROM nvidia/cuda:11.8-devel-ubuntu22.04 AS cuda-base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3.10-venv \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    libssl-dev \
    libffi-dev \
    libhdf5-dev \
    libopencv-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    pkg-config \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Stage 2: Python environment setup
FROM cuda-base AS python-env

# Create virtual environment
RUN python3.10 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install PyTorch with CUDA support (pinned versions for stability)
RUN pip install --no-cache-dir \
    torch==2.0.1+cu118 \
    torchvision==0.15.2+cu118 \
    torchaudio==2.0.2+cu118 \
    --index-url https://download.pytorch.org/whl/cu118

# Stage 3: ML dependencies
FROM python-env AS ml-deps

# Install TensorFlow GPU
RUN pip install --no-cache-dir tensorflow-gpu==2.13.0

# Install core ML and data science packages
RUN pip install --no-cache-dir \
    numpy==1.24.3 \
    pandas==2.0.3 \
    scikit-learn==1.3.0 \
    matplotlib==3.7.2 \
    seaborn==0.12.2 \
    plotly==5.15.0 \
    opencv-python==4.8.0.74 \
    pillow==10.0.0 \
    imageio==2.31.1 \
    scipy==1.11.1 \
    joblib==1.3.1 \
    tqdm==4.65.0 \
    requests==2.31.0 \
    boto3==1.28.25 \
    psutil==5.9.5

# Install specialized ML packages
RUN pip install --no-cache-dir \
    transformers==4.32.1 \
    datasets==2.14.4 \
    accelerate==0.21.0 \
    diffusers==0.19.3 \
    xgboost==1.7.6 \
    lightgbm==4.0.0 \
    catboost==1.2 \
    optuna==3.3.0 \
    wandb==0.15.8 \
    mlflow==2.5.0

# Stage 4: Final optimized image
FROM cuda-base AS final

# Copy virtual environment from previous stage
COPY --from=ml-deps /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN groupadd -r mluser && useradd -r -g mluser -u 1001 mluser \
    && mkdir -p /app /data /models \
    && chown -R mluser:mluser /app /data /models

# Set working directory
WORKDIR /app

# Switch to non-root user
USER mluser

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 -c "import torch, tensorflow as tf; print('GPU available:', torch.cuda.is_available(), tf.config.list_physical_devices('GPU'))" || exit 1

# Default command
CMD ["python3", "--version"]

# Labels for metadata
LABEL maintainer="kai-project"
LABEL version="1.0.0"
LABEL description="Optimized ML base image with CUDA, PyTorch, and TensorFlow"
LABEL gpu.required="true"
LABEL python.version="3.10"