apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-service
  labels:
    app: webhook-service
    component: messaging
spec:
  replicas: 2  # Multiple replicas for high availability
  selector:
    matchLabels:
      app: webhook-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: webhook-service
        component: messaging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: webhook-service
        image: ghcr.io/basilakis/kai/webhook-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9100
          name: metrics
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
        env:
        - name: NODE_ENV
          value: "production"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: log_level
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: redis_host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: redis_port
        # Secrets as environment variables
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kai-unified-secrets
              key: redis_password
        - name: WEBHOOK_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: webhook_timeout
        - name: WEBHOOK_MAX_RETRIES
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: webhook_max_retries
        - name: WEBHOOK_RETRY_DELAY
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: webhook_retry_delay
        - name: WEBHOOK_SIGNING_SECRET
          valueFrom:
            secretKeyRef:
              name: kai-unified-secrets
              key: webhook_signing_secret
        - name: SUPABASE_URL
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: supabase_url
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: kai-unified-secrets
              key: supabase_service_role_key
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: kafka_bootstrap_servers
        - name: KAFKA_TOPIC_WEBHOOK_EVENTS
          valueFrom:
            configMapKeyRef:
              name: webhook-config
              key: kafka_topic_webhook_events
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: kai-unified-secrets
              key: kafka_username
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kai-unified-secrets
              key: kafka_password
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: webhook-config
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-service
  labels:
    app: webhook-service
    component: messaging
spec:
  selector:
    app: webhook-service
  ports:
  - port: 80
    targetPort: 3100
    protocol: TCP
    name: http
  - port: 9100
    targetPort: 9100
    protocol: TCP
    name: metrics
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook-config
data:
  log_level: "info"
  redis_host: "redis-master.kai.svc.cluster.local"
  redis_port: "6379"
  webhook_timeout: "5000"
  webhook_max_retries: "3"
  webhook_retry_delay: "1000"
  supabase_url: "https://your-project.supabase.co"
  kafka_bootstrap_servers: "kafka.kai.svc.cluster.local:9092"
  kafka_topic_webhook_events: "webhook-events"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: webhook-service-network-policy
spec:
  podSelector:
    matchLabels:
      app: webhook-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: messaging
    ports:
    - protocol: TCP
      port: 3100
    - protocol: TCP
      port: 9100
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443
  - to:
    - podSelector:
        matchLabels:
          app: redis-master
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: kafka
    ports:
    - protocol: TCP
      port: 9092
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webhook-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webhook-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max
