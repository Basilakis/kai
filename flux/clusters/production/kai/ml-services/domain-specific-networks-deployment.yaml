apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-specific-networks
  labels:
    app: domain-specific-networks
    component: ml-services
spec:
  replicas: 1  # Start with 1 replica - will be autoscaled
  selector:
    matchLabels:
      app: domain-specific-networks
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: domain-specific-networks
        component: ml-services
        gpu-enabled: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: domain-specific-networks
        image: ${REGISTRY_URL}/kai/domain-specific-networks:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8100
          name: http
        - containerPort: 9100
          name: metrics
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: 1
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: log_level
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: redis_host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: redis_port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: domain-specific-networks-secrets
              key: redis_password
        - name: MODEL_CACHE_DIR
          value: "/models/cache"
        - name: TORCH_HOME
          value: "/models/torch"
        - name: USE_CUDA
          value: "true"
        - name: MAX_BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: max_batch_size
        - name: DEFAULT_MODEL_TYPE
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: default_model_type
        - name: USE_TEXTURE_BACKBONE
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: use_texture_backbone
        - name: USE_SVD_FEATURES
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: use_svd_features
        - name: PARAMETER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: domain-specific-networks-config
              key: parameter_registry_url
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60  # Longer due to model loading
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /models
        - name: shared-data-volume
          mountPath: /shared-data
      volumes:
      - name: config-volume
        configMap:
          name: domain-specific-networks-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: dsn-models-pvc
      - name: shared-data-volume
        persistentVolumeClaim:
          claimName: ml-shared-data-pvc
      # Use node with appropriate GPU
      nodeSelector:
        gpu-type: nvidia-t4
      # Use RuntimeClass for GPU support
      runtimeClassName: nvidia-gpu
---
apiVersion: v1
kind: Service
metadata:
  name: domain-specific-networks
  labels:
    app: domain-specific-networks
    component: ml-services
spec:
  selector:
    app: domain-specific-networks
  ports:
  - port: 80
    targetPort: 8100
    protocol: TCP
    name: http
  - port: 9100
    targetPort: 9100
    protocol: TCP
    name: metrics
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dsn-models-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 40Gi
  storageClassName: managed-premium
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: domain-specific-networks-config
data:
  log_level: "info"
  redis_host: "redis-master.kai-ml.svc.cluster.local"
  redis_port: "6379"
  max_batch_size: "8"
  default_model_type: "texture_resnet18"
  use_texture_backbone: "true"
  use_svd_features: "true"
  parameter_registry_url: "http://parameter-registry.kai-ml.svc.cluster.local"
  model_config.json: |
    {
      "supportedModels": {
        "backbones": [
          {
            "name": "texture_resnet18",
            "description": "Texture-Enhanced ResNet18",
            "minGPUMemory": "4GB",
            "recommendedGPUMemory": "8GB"
          },
          {
            "name": "texture_resnet50",
            "description": "Texture-Enhanced ResNet50",
            "minGPUMemory": "6GB",
            "recommendedGPUMemory": "12GB"
          },
          {
            "name": "texturenet",
            "description": "TextureNetSVD architecture",
            "minGPUMemory": "8GB",
            "recommendedGPUMemory": "16GB"
          }
        ],
        "textureLossFunctions": [
          {
            "name": "texture_specific_loss",
            "description": "Combined classification and texture consistency loss",
            "parameters": {
              "alpha": 1.0,
              "beta": 0.5,
              "gamma": 0.1
            }
          }
        ],
        "textureModules": [
          {
            "name": "TextureAttentionModule",
            "description": "Multi-head self-attention for textures",
            "parameters": {
              "heads": 8,
              "dimHead": 32
            }
          },
          {
            "name": "TextureGaborFilters",
            "description": "Learnable Gabor filters for textures",
            "parameters": {
              "numOrientations": 8,
              "numScales": 3
            }
          },
          {
            "name": "MultiScaleTextureModule",
            "description": "Multi-scale texture processing",
            "parameters": {
              "scales": [1, 2, 4]
            }
          },
          {
            "name": "TextureResidualBlock",
            "description": "Residual block with texture components",
            "parameters": {
              "useAttention": true,
              "useMultiScale": true
            }
          },
          {
            "name": "SVDTextureExtractor",
            "description": "SVD-based texture feature extraction",
            "parameters": {
              "textureDim": 32,
              "poolingSize": 4
            }
          }
        ]
      }
    }
  augmentation_config.json: |
    {
      "materialTypeAugmentations": {
        "wood": {
          "grainDirectionVariation": true,
          "colorShifts": true
        },
        "metal": {
          "reflectionIntensity": true,
          "specularityChanges": true
        },
        "fabric": {
          "threadPatternAugmentation": true,
          "weaveVariations": true
        },
        "stone": {
          "veiningPatternEnhancement": true,
          "weatheringSimulation": true
        }
      }
    }
---
# Training Job for Domain-Specific Networks
apiVersion: batch/v1
kind: Job
metadata:
  name: domain-specific-networks-training
spec:
  template:
    spec:
      containers:
      - name: domain-specific-networks-training
        image: ${REGISTRY_URL}/kai/domain-specific-networks-training:latest
        resources:
          requests:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: 1
          limits:
            cpu: "8"
            memory: "32Gi"
            nvidia.com/gpu: 1
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: MODEL_TYPE
          value: "texture_resnet18"
        - name: NUM_CLASSES
          value: "50"
        - name: BATCH_SIZE
          value: "16"
        - name: NUM_EPOCHS
          value: "10"
        - name: LEARNING_RATE
          value: "0.001"
        - name: USE_TEXTURE_BACKBONE
          value: "true"
        - name: USE_SVD_FEATURES
          value: "true"
        - name: USE_TEXTURE_LOSS
          value: "true"
        - name: DATASET_PATH
          value: "/datasets/material-textures"
        - name: OUTPUT_MODEL_PATH
          value: "/models/domain-specific-networks/trained-model.pt"
        - name: EXPORT_ONNX
          value: "true"
        - name: PARAMETER_REGISTRY_URL
          value: "http://parameter-registry.kai-ml.svc.cluster.local"
        volumeMounts:
        - name: models-volume
          mountPath: /models
        - name: datasets-volume
          mountPath: /datasets
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: dsn-models-pvc
      - name: datasets-volume
        persistentVolumeClaim:
          claimName: ml-datasets-pvc
      restartPolicy: Never
      nodeSelector:
        gpu-type: nvidia-a10
      runtimeClassName: nvidia-gpu
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: domain-specific-networks-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: domain-specific-networks
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
