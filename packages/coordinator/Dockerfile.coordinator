<![CDATA[
# STAGE 1: Build Stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy root package files and necessary workspace package.json files
COPY package.json yarn.lock ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/coordinator/package.json ./packages/coordinator/

# Install dependencies using yarn workspaces
RUN yarn install --frozen-lockfile --production=false

# Copy source code for shared and coordinator packages
COPY packages/shared ./packages/shared/
COPY packages/coordinator ./packages/coordinator/
COPY tsconfig.json ./

# Build shared and coordinator packages
RUN yarn workspace @kai/shared build && \
    yarn workspace @kai/coordinator build

# Prune dev dependencies
RUN yarn install --frozen-lockfile --production=true


# STAGE 2: Production Stage
FROM node:20-alpine

WORKDIR /app

# Create a non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copy built code and production node_modules from builder stage
COPY --from=builder /app/packages/coordinator/dist ./dist
COPY --from=builder /app/packages/coordinator/package.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages/shared /app/packages/shared

# Ensure correct ownership
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose the application port (assuming default is 8080 from deployment.yaml)
EXPOSE 8080
EXPOSE 8081

# Set environment variables
ENV NODE_ENV=production \
    PORT=8080 \
    METRICS_PORT=8081

# Add healthcheck (assuming /health endpoint exists)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget -q --spider http://localhost:${PORT}/health || exit 1

# Start the application
CMD ["node", "dist/main.js"]
]]>