name: Setup Kubernetes Infrastructure

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to setup (production or staging)'
        required: true
        type: string
    secrets:
      domain_name:
        required: true
      admin_email:
        required: true
      mongodb_uri:
        required: true
      jwt_secret:
        required: true
      openai_api_key:
        required: false
      supabase_url:
        required: true
      supabase_key:
        required: true
      supabase_anon_key:
        required: true
      redis_password:
        required: true
      stripe_secret_key:
        required: false
      stripe_publishable_key:
        required: false
      # CrewAI Agent Secrets
      anthropic_api_key:
        required: false
      google_api_key:
        required: false
      azure_openai_api_key:
        required: false
      azure_openai_endpoint:
        required: false
      huggingface_api_key:
        required: false
      pinecone_api_key:
        required: false
      weaviate_url:
        required: false
      weaviate_api_key:
        required: false
      qdrant_url:
        required: false
      qdrant_api_key:
        required: false
      elasticsearch_url:
        required: false
      elasticsearch_username:
        required: false
      elasticsearch_password:
        required: false
      serper_api_key:
        required: false
      tavily_api_key:
        required: false
      browserless_api_key:
        required: false
      firecrawl_api_key:
        required: false
      slack_bot_token:
        required: false
      discord_bot_token:
        required: false
      telegram_bot_token:
        required: false
      twilio_account_sid:
        required: false
      twilio_auth_token:
        required: false
      sendgrid_api_key:
        required: false
      aws_access_key_id:
        required: false
      aws_secret_access_key:
        required: false
      gcp_service_account_key:
        required: false
      azure_client_id:
        required: false
      azure_client_secret:
        required: false
      azure_tenant_id:
        required: false

jobs:
  setup-kubernetes:
    name: Setup Kubernetes Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'
      
      - name: Create environment files
        run: |
          # Create .env file for the environment
          cat > .env.${{ inputs.environment }} << EOF
          # OpenAI API
          OPENAI_API_KEY=${{ secrets.openai_api_key }}
          
          # Database
          MONGODB_URI=${{ secrets.mongodb_uri }}
          
          # Authentication
          JWT_SECRET=${{ secrets.jwt_secret }}
          
          # Supabase
          SUPABASE_URL=${{ secrets.supabase_url }}
          SUPABASE_KEY=${{ secrets.supabase_key }}
          
          # Frontend URLs
          GATSBY_API_URL=https://api.${{ inputs.environment == 'staging' && format('staging.{0}', secrets.domain_name) || secrets.domain_name }}
          GATSBY_SUPABASE_URL=${{ secrets.supabase_url }}
          GATSBY_SUPABASE_ANON_KEY=${{ secrets.supabase_anon_key }}
          
          # Stripe (if using payments)
          STRIPE_SECRET_KEY=${{ secrets.stripe_secret_key }}
          GATSBY_STRIPE_PUBLISHABLE_KEY=${{ secrets.stripe_publishable_key }}
          EOF
      
      - name: Create Kubernetes namespace
        run: |
          kubectl create namespace kai-system --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create unified Kubernetes secret
        run: |
          # Create unified secret containing all application and CrewAI agent secrets
          kubectl create secret generic kai-unified-secrets \
            --namespace kai-system \
            --from-literal=mongodb-uri='${{ secrets.mongodb_uri }}' \
            --from-literal=jwt-secret='${{ secrets.jwt_secret }}' \
            --from-literal=openai-api-key='${{ secrets.openai_api_key }}' \
            --from-literal=supabase-url='${{ secrets.supabase_url }}' \
            --from-literal=supabase-key='${{ secrets.supabase_key }}' \
            --from-literal=supabase-anon-key='${{ secrets.supabase_anon_key }}' \
            --from-literal=stripe-secret-key='${{ secrets.stripe_secret_key }}' \
            --from-literal=stripe-publishable-key='${{ secrets.stripe_publishable_key }}' \
            --from-literal=redis-password='${{ secrets.redis_password }}' \
            --from-literal=anthropic-api-key='${{ secrets.anthropic_api_key }}' \
            --from-literal=google-api-key='${{ secrets.google_api_key }}' \
            --from-literal=azure-openai-api-key='${{ secrets.azure_openai_api_key }}' \
            --from-literal=azure-openai-endpoint='${{ secrets.azure_openai_endpoint }}' \
            --from-literal=huggingface-api-key='${{ secrets.huggingface_api_key }}' \
            --from-literal=pinecone-api-key='${{ secrets.pinecone_api_key }}' \
            --from-literal=weaviate-url='${{ secrets.weaviate_url }}' \
            --from-literal=weaviate-api-key='${{ secrets.weaviate_api_key }}' \
            --from-literal=qdrant-url='${{ secrets.qdrant_url }}' \
            --from-literal=qdrant-api-key='${{ secrets.qdrant_api_key }}' \
            --from-literal=elasticsearch-url='${{ secrets.elasticsearch_url }}' \
            --from-literal=elasticsearch-username='${{ secrets.elasticsearch_username }}' \
            --from-literal=elasticsearch-password='${{ secrets.elasticsearch_password }}' \
            --from-literal=serper-api-key='${{ secrets.serper_api_key }}' \
            --from-literal=tavily-api-key='${{ secrets.tavily_api_key }}' \
            --from-literal=browserless-api-key='${{ secrets.browserless_api_key }}' \
            --from-literal=firecrawl-api-key='${{ secrets.firecrawl_api_key }}' \
            --from-literal=slack-bot-token='${{ secrets.slack_bot_token }}' \
            --from-literal=discord-bot-token='${{ secrets.discord_bot_token }}' \
            --from-literal=telegram-bot-token='${{ secrets.telegram_bot_token }}' \
            --from-literal=twilio-account-sid='${{ secrets.twilio_account_sid }}' \
            --from-literal=twilio-auth-token='${{ secrets.twilio_auth_token }}' \
            --from-literal=sendgrid-api-key='${{ secrets.sendgrid_api_key }}' \
            --from-literal=aws-access-key-id='${{ secrets.aws_access_key_id }}' \
            --from-literal=aws-secret-access-key='${{ secrets.aws_secret_access_key }}' \
            --from-literal=gcp-service-account-key='${{ secrets.gcp_service_account_key }}' \
            --from-literal=azure-client-id='${{ secrets.azure_client_id }}' \
            --from-literal=azure-client-secret='${{ secrets.azure_client_secret }}' \
            --from-literal=azure-tenant-id='${{ secrets.azure_tenant_id }}' \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Check and Install cert-manager
        run: |
          # Check if cert-manager is already installed
          if kubectl get namespace cert-manager &>/dev/null && kubectl get deployment -n cert-manager cert-manager &>/dev/null; then
            echo "cert-manager is already installed, skipping installation"
          else
            echo "Installing cert-manager..."
            # Add Jetstack Helm repo
            helm repo add jetstack https://charts.jetstack.io
            
            # Install cert-manager
            helm upgrade --install cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace \
              --version v1.11.0 \
              --set installCRDs=true
            
            # Wait for cert-manager to be ready
            kubectl -n cert-manager rollout status deployment/cert-manager
            kubectl -n cert-manager rollout status deployment/cert-manager-webhook
          fi
          
          # Check if ClusterIssuer exists
          if kubectl get clusterissuer letsencrypt-prod &>/dev/null; then
            echo "ClusterIssuer already exists, skipping creation"
          else
            echo "Creating ClusterIssuer for Let's Encrypt..."
            # Create ClusterIssuer for Let's Encrypt
            cat > cluster-issuer.yaml << EOF
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              name: letsencrypt-prod
            spec:
              acme:
                server: https://acme-v02.api.letsencrypt.org/directory
                email: ${{ secrets.admin_email }}
                privateKeySecretRef:
                  name: letsencrypt-prod
                solvers:
                - http01:
                    ingress:
                      class: nginx
            EOF
            
            kubectl apply -f cluster-issuer.yaml
          fi
      
      - name: Check and Install NGINX Ingress Controller
        run: |
          # Check if NGINX Ingress is already installed
          if kubectl get deployment -n kai-system nginx-ingress-ingress-nginx-controller &>/dev/null; then
            echo "NGINX Ingress Controller is already installed, skipping installation"
          else
            echo "Installing NGINX Ingress Controller..."
            # Add NGINX Ingress Helm repo
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            
            # Install NGINX Ingress
            helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
              --namespace kai-system \
              --set controller.publishService.enabled=true
            
            # Wait for NGINX Ingress to be ready
            kubectl -n kai-system rollout status deployment/nginx-ingress-ingress-nginx-controller
          fi
      
      - name: Check and Install Argo Workflows
        run: |
          # Check if Argo Workflows is already installed
          if kubectl get namespace argo &>/dev/null && kubectl get deployment -n argo argo-server &>/dev/null; then
            echo "Argo Workflows is already installed, skipping installation"
          else
            echo "Installing Argo Workflows..."
            # Create namespace
            kubectl create namespace argo --dry-run=client -o yaml | kubectl apply -f -
            
            # Install Argo Workflows
            kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.4.5/install.yaml
            
            # Wait for Argo to be ready
            kubectl -n argo rollout status deployment/argo-server
          fi
          
          # Check and update Argo configuration
          echo "Configuring Argo to work with the kai-system namespace..."
          kubectl patch configmap/workflow-controller-configmap \
            -n argo \
            --type merge \
            -p '{"data":{"workflowNamespaces":"kai-system,argo"}}' \
            --dry-run=client -o yaml | kubectl apply -f -
