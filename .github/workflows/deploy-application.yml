name: Deploy Application

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to (production or staging)'
        required: true
        type: string
      domain:
        description: 'Domain name for the environment'
        required: true
        type: string
      sha:
        description: 'Git SHA to deploy'
        required: true
        type: string
    secrets:
      docker_registry:
        required: false
      docker_username:
        required: false
      github_access_token:
        required: true
      github_repository:
        required: false
      slack_webhook:
        required: false

jobs:
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Create GitHub Container Registry secret
        run: |
          # Check if secret already exists
          if ! kubectl get secret github-container-registry -n kai-system &>/dev/null; then
            # Create the secret
            kubectl create secret docker-registry github-container-registry \
              --docker-server=ghcr.io \
              --docker-username=${{ github.repository_owner }} \
              --docker-password=${{ secrets.github_access_token }} \
              --docker-email=${{ github.actor }}@users.noreply.github.com \
              -n kai-system
            echo "Created GitHub Container Registry secret"
          else
            # Update the secret
            kubectl create secret docker-registry github-container-registry \
              --docker-server=ghcr.io \
              --docker-username=${{ github.repository_owner }} \
              --docker-password=${{ secrets.github_access_token }} \
              --docker-email=${{ github.actor }}@users.noreply.github.com \
              -n kai-system \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "Updated GitHub Container Registry secret"
          fi

      - name: Deploy with Helm
        run: |
          # Update Helm repos
          helm repo update

          # Create values override file
          cat > values-override.yaml << EOF
          global:
            environment: ${{ inputs.environment }}
            registry:
              url: "ghcr.io"
            repository: ${{ secrets.github_repository || github.repository }}
            image:
              tag: ${{ inputs.sha }}
            domain: ${{ inputs.domain }}
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: nginx
                cert-manager.io/cluster-issuer: letsencrypt-prod
              hosts:
                - host: api.${{ inputs.domain }}
                  paths:
                    - path: /
                      pathType: Prefix
              tls:
                - secretName: kai-tls-cert
                  hosts:
                    - api.${{ inputs.domain }}
          EOF

          # Deploy using Helm
          helm upgrade --install kai ./helm-charts/kai \
            --namespace kai-system \
            --values ./helm-charts/kai/values-${{ inputs.environment }}.yaml \
            --values values-override.yaml

      - name: Verify deployment
        run: |
          # Wait for deployments to be ready
          kubectl -n kai-system rollout status deployment/api-server
          kubectl -n kai-system rollout status deployment/coordinator-service

          # Check if services are running
          kubectl -n kai-system get services

          # Check if ingress is configured
          kubectl -n kai-system get ingress

          # Check if certificates are issued
          kubectl -n kai-system get certificates

      - name: Run database migrations and post-deployment tasks
        run: |
          # Create a temporary pod to run migrations
          cat > migration-job.yaml << EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: database-migrations
            namespace: kai-system
          spec:
            template:
              spec:
                containers:
                - name: migrations
                  image: ghcr.io/${{ secrets.github_repository || github.repository }}/kai-api:${{ inputs.sha }}
                  command: ["node", "scripts/run-migrations.js"]
                imagePullSecrets:
                - name: github-container-registry
                  env:
                  - name: MONGODB_URI
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: mongodb-uri
                restartPolicy: Never
            backoffLimit: 4
          EOF

          kubectl apply -f migration-job.yaml

          # Wait for migrations to complete
          kubectl -n kai-system wait --for=condition=complete job/database-migrations --timeout=120s

          # Run post-deployment tasks
          cat > post-deployment-job.yaml << EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: post-deployment-tasks
            namespace: kai-system
          spec:
            template:
              spec:
                containers:
                - name: post-deployment
                  image: ghcr.io/${{ secrets.github_repository || github.repository }}/kai-api:${{ inputs.sha }}
                  command: ["node", "scripts/run-post-deployment.js"]
                  env:
                  - name: NODE_ENV
                    value: "${{ inputs.environment }}"
                  - name: SUPABASE_URL_PRODUCTION
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-url-production
                        optional: true
                  - name: SUPABASE_KEY_PRODUCTION
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-key-production
                        optional: true
                  - name: SUPABASE_URL_STAGING
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-url-staging
                        optional: true
                  - name: SUPABASE_KEY_STAGING
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-key-staging
                        optional: true
                  - name: SUPABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-url
                        optional: true
                  - name: SUPABASE_KEY
                    valueFrom:
                      secretKeyRef:
                        name: kai-secrets
                        key: supabase-key
                        optional: true
                imagePullSecrets:
                - name: github-container-registry
                restartPolicy: Never
            backoffLimit: 4
          EOF

          kubectl apply -f post-deployment-job.yaml

          # Wait for post-deployment tasks to complete
          kubectl -n kai-system wait --for=condition=complete job/post-deployment-tasks --timeout=120s

      - name: Notify deployment status
        if: secrets.slack_webhook != ''
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.slack_webhook }}
          SLACK_TITLE: "Deployment Status"
          SLACK_MESSAGE: "Kubernetes deployment to ${{ inputs.environment }} ${{ job.status }}"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
