name: Deploy to Staging

on:
  workflow_call:
    inputs:
      sha:
        description: 'The commit SHA to deploy'
        required: true
        type: string
    secrets:
      docker_username:
        required: true
      docker_password: 
        required: true
      docker_registry:
        required: true
      kube_config:
        required: true
      gitops_ssh_key:
        required: true
      vercel_token:
        required: true
      vercel_org_id:
        required: true
      vercel_project_id_client:
        required: true
      vercel_project_id_admin:
        required: true
      supabase_url:
        required: true
      supabase_service_key:
        required: true

jobs:
  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: "staging"
      KUBE_CONTEXT: "kubernetes-staging"
      DOCKER_BUILDKIT: "1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.25.0"

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.kube_config }}" > kubeconfig
          chmod 600 kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Set up SSH for GitOps
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.gitops_ssh_key }}

      - name: Update GitOps Repository
        run: |
          git clone git@github.com:your-org/gitops-repo.git
          cd gitops-repo
          
          # Update image tags for staging environment
          sed -i "s|image: .*kai-api-server:.*|image: ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-api-server:${{ inputs.sha }}|g" environments/staging/kustomization.yaml
          sed -i "s|image: .*kai-coordinator:.*|image: ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-coordinator:${{ inputs.sha }}|g" environments/staging/kustomization.yaml
          
          # Commit and push changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add environments/staging/
          git commit -m "Update image tags for staging to ${{ inputs.sha }}"
          git push

      - name: Run Database Migrations
        run: |
          # Set up Node.js for migrations
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Run Supabase migrations for staging
          npx supabase db push --db-url "${{ secrets.supabase_url }}" --auth-token "${{ secrets.supabase_service_key }}"

      - name: Deploy to Kubernetes (Staging)
        run: |
          # Deploy using Helm or direct kubectl apply
          chmod +x ./helm-charts/helm-deploy.sh
          ./helm-charts/helm-deploy.sh \
            --context=${{ env.KUBE_CONTEXT }} \
            --registry=${{ secrets.docker_registry }}/${{ secrets.docker_username }} \
            --tag=${{ inputs.sha }} \
            --env=staging \
            --release=kai-staging

      - name: Deploy Client App to Vercel (Staging)
        uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{ secrets.vercel_token }}
          vercel-token: ${{ secrets.vercel_token }}
          vercel-org-id: ${{ secrets.vercel_org_id }}
          vercel-project-id: ${{ secrets.vercel_project_id_client }}
          working-directory: ./packages/client
          alias-domains: |
            staging.kai-app.com

      - name: Deploy Admin Panel to Vercel (Staging)
        uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{ secrets.vercel_token }}
          vercel-token: ${{ secrets.vercel_token }}
          vercel-org-id: ${{ secrets.vercel_org_id }}
          vercel-project-id: ${{ secrets.vercel_project_id_admin }}
          working-directory: ./packages/admin
          alias-domains: |
            admin.staging.kai-app.com

      - name: Monitor Deployment Health
        run: |
          echo "Monitoring staging deployment health for 2 minutes..."
          FAILURES=0
          
          for i in {1..12}; do
            # Check API health
            if ! curl -s -f https://api.staging.kai-app.com/health > /dev/null; then
              FAILURES=$((FAILURES+1))
            fi
            
            # Check coordinator health via Kubernetes
            if ! kubectl --context=${{ env.KUBE_CONTEXT }} get pods -n kai-staging -l app=coordinator-service | grep -q "Running"; then
              FAILURES=$((FAILURES+1))
            fi
            
            if [ $FAILURES -ge 3 ]; then
              echo "::warning::Health check failures detected in staging environment"
              echo "::set-output name=health_status::degraded"
              break
            fi
            
            sleep 10
          done
          
          if [ $FAILURES -lt 3 ]; then
            echo "::set-output name=health_status::healthy"
            echo "Staging deployment appears healthy"
          fi