name: Enhanced RAG CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/ml/python/**'
      - 'Dockerfile.continuous-learning'
      - 'requirements-rag.txt'
      - '.github/workflows/enhanced-rag.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/ml/python/**'
      - 'Dockerfile.continuous-learning'
      - 'requirements-rag.txt'
      - '.github/workflows/enhanced-rag.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-rag.txt
          pip install pytest pytest-asyncio

      - name: Run tests
        run: |
          cd packages/ml/python
          pytest test_integration.py

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: prep
        run: |
          GHCR_TAGS="ghcr.io/${{ github.repository }}/continuous-learning:latest,ghcr.io/${{ github.repository }}/continuous-learning:${{ github.sha }}"
          echo "tags=$GHCR_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Continuous Learning Service
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.continuous-learning
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/continuous-learning:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/continuous-learning:cache,mode=max

      - name: Update MCP Server Image
        run: |
          # This step would update your existing MCP server image build process
          # to include the enhanced RAG system components
          echo "Updating MCP server image to include enhanced RAG system"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up Kubernetes config
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: Create GitHub Container Registry secret if not exists
        run: |
          if ! kubectl get secret github-container-registry -n default &>/dev/null; then
            kubectl create secret docker-registry github-container-registry \
              --docker-server=ghcr.io \
              --docker-username=${{ github.repository_owner }} \
              --docker-password=${{ secrets.GITHUB_TOKEN }} \
              --docker-email=${{ github.actor }}@users.noreply.github.com \
              -n default
            echo "Created GitHub Container Registry secret"
          else
            echo "GitHub Container Registry secret already exists"
          fi

      - name: Update image tags
        run: |
          # Update image to use GitHub Container Registry
          sed -i "s|image:.*|image: ghcr.io/${{ github.repository }}/continuous-learning:${{ github.sha }}|g" kubernetes/continuous-learning-deployment.yaml

          # Add GitHub Container Registry as imagePullSecrets
          if ! grep -q "imagePullSecrets" kubernetes/continuous-learning-deployment.yaml; then
            sed -i '/spec:/a\      imagePullSecrets:\n      - name: github-container-registry' kubernetes/continuous-learning-deployment.yaml
          fi

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/continuous-learning-deployment.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/continuous-learning
