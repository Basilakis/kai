name: Build and Deploy Docusaurus Documentation

on:
  # Only run manually when requested
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Message for the deployment PR'
        required: true
        default: 'Update documentation'

jobs:
  build_and_deploy_docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          npm install -g fs-extra

      - name: Create Docusaurus site
        run: |
          # Create a temporary directory for the documentation site
          mkdir -p kai-docs-temp
          cd kai-docs-temp

          # Create basic directories needed for the build
          mkdir -p docs src/css static/img

          # Create a package.json file
          echo '{
            "name": "kai-documentation",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "docusaurus": "docusaurus",
              "start": "docusaurus start",
              "build": "docusaurus build",
              "swizzle": "docusaurus swizzle",
              "deploy": "docusaurus deploy",
              "clear": "docusaurus clear",
              "serve": "docusaurus serve",
              "write-translations": "docusaurus write-translations",
              "write-heading-ids": "docusaurus write-heading-ids"
            },
            "dependencies": {
              "@docusaurus/core": "3.7.0",
              "@docusaurus/preset-classic": "3.7.0",
              "@mdx-js/react": "3.0.0",
              "clsx": "2.1.0",
              "prism-react-renderer": "2.3.1",
              "react": "18.2.0",
              "react-dom": "18.2.0"
            },
            "devDependencies": {
              "@docusaurus/module-type-aliases": "3.7.0",
              "@docusaurus/types": "3.7.0",
              "typescript": "5.3.3"
            },
            "browserslist": {
              "production": [
                ">0.5%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            },
            "engines": {
              "node": ">=18.0"
            }
          }' > package.json

          # Create a basic tsconfig.json file
          echo '{
            "compilerOptions": {
              "target": "es2020",
              "lib": ["dom", "dom.iterable", "esnext"],
              "allowJs": true,
              "skipLibCheck": true,
              "esModuleInterop": true,
              "allowSyntheticDefaultImports": true,
              "strict": true,
              "forceConsistentCasingInFileNames": true,
              "noFallthroughCasesInSwitch": true,
              "module": "esnext",
              "moduleResolution": "node",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "jsx": "react-jsx"
            },
            "include": ["src", "docs"]
          }' > tsconfig.json

          # Create custom CSS
          echo '/**
           * Any CSS included here will be global. The classic template
           * bundles Infima by default. Infima is a CSS framework designed to
           * work well for content-centric websites.
           */

          /* You can override the default Infima variables here. */
          :root {
            --ifm-color-primary: #2e8555;
            --ifm-color-primary-dark: #29784c;
            --ifm-color-primary-darker: #277148;
            --ifm-color-primary-darkest: #205d3b;
            --ifm-color-primary-light: #33925d;
            --ifm-color-primary-lighter: #359962;
            --ifm-color-primary-lightest: #3cad6e;
            --ifm-code-font-size: 95%;
            --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
          }

          /* For readability concerns, you should choose a lighter palette in dark mode. */
          [data-theme="dark"] {
            --ifm-color-primary: #25c2a0;
            --ifm-color-primary-dark: #21af90;
            --ifm-color-primary-darker: #1fa588;
            --ifm-color-primary-darkest: #1a8870;
            --ifm-color-primary-light: #29d5b0;
            --ifm-color-primary-lighter: #32d8b4;
            --ifm-color-primary-lightest: #4fddbf;
            --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
          }' > src/css/custom.css

          # Create placeholder logo
          echo '<svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
            <rect width="200" height="200" fill="#2e8555" />
            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="72" fill="white">KAI</text>
          </svg>' > static/img/logo.svg

      - name: Generate config files
        run: |
          cd kai-docs-temp
          
          # Create sidebars.js
          node -e "
            const fs = require('fs');
            
            const sidebarsContent = 'const sidebars = { docs: [ { type: \"category\", label: \"Introduction\", items: [\"introduction\"], }, { type: \"category\", label: \"Getting Started\", items: [\"installation\", \"configuration\"], }, { type: \"category\", label: \"Features\", items: [\"features-overview\"], }, { type: \"category\", label: \"Prompts\", items: [ \"prompt-library\", \"prompt-abtesting-segmentation\", \"prompt-advanced-features\", \"prompt-management\", \"prompt-success-tracking\", ], }, { type: \"category\", label: \"Deployment\", items: [\"deployment-guide\", \"kubernetes-architecture\", \"cicd-pipeline\"], }, { type: \"category\", label: \"Other\", items: [\"admin-panel\", \"queue-system\", \"notification-webhook-system\"], }, ], }; module.exports = sidebars;';
            
            fs.writeFileSync('sidebars.js', sidebarsContent);
            console.log('Created sidebars.js');
          "
          
          # Create docusaurus.config.js
          node -e "
            const fs = require('fs');
            
            const configContent = 'const config = { title: \"KAI Documentation\", tagline: \"Comprehensive documentation for the KAI project\", favicon: \"img/favicon.ico\", url: \"https://basilakis.github.io\", baseUrl: \"/\", organizationName: \"Basilakis\", projectName: \"basilakis.github.io\", trailingSlash: false, onBrokenLinks: \"warn\", onBrokenMarkdownLinks: \"warn\", i18n: { defaultLocale: \"en\", locales: [\"en\"], }, presets: [ [ \"classic\", { docs: { sidebarPath: \"./sidebars.js\", routeBasePath: \"/\", }, blog: false, theme: { customCss: \"./src/css/custom.css\", }, }, ], ], themeConfig: { navbar: { title: \"KAI Documentation\", logo: { alt: \"KAI Logo\", src: \"img/logo.svg\", }, items: [ { href: \"https://github.com/Basilakis/kai\", label: \"GitHub\", position: \"right\", }, ], }, footer: { style: \"dark\", links: [ { title: \"More\", items: [ { label: \"GitHub\", href: \"https://github.com/Basilakis/kai\", }, ], }, ], copyright: `Copyright Â© ${new Date().getFullYear()} KAI Project. Last updated: ${new Date().toISOString().split(\"T\")[0]}. Built with Docusaurus.`, }, }, }; module.exports = config;';
            
            fs.writeFileSync('docusaurus.config.js', configContent);
            console.log('Created docusaurus.config.js');
          "
          
          # Create placeholder markdown files
          mkdir -p docs
          
          # Create introduction.md
          echo '---
id: introduction
title: "Introduction to KAI"
sidebar_label: "Introduction"
slug: /
---

# Introduction to KAI

Welcome to the KAI documentation.' > docs/introduction.md
          
          # Create installation.md
          echo '---
id: installation
title: "Installation"
sidebar_label: "Installation"
---

# Installation

This page provides instructions for installing the KAI platform.' > docs/installation.md
          
          # Create configuration.md
          echo '---
id: configuration
title: "Configuration"
sidebar_label: "Configuration"
---

# Configuration

This page provides instructions for configuring the KAI platform.' > docs/configuration.md
          
          # Create features-overview.md
          echo '---
id: features-overview
title: "Features Overview"
sidebar_label: "Features Overview"
---

# Features Overview

This page provides an overview of the features available in the KAI platform.' > docs/features-overview.md

      - name: Process readme files
        run: |
          mkdir -p kai-docs-temp/docs
          cd readme
          node process-readme-files.js
          
          # Fix any problematic markdown files
          cd ../kai-docs-temp/docs
          find . -name "*.md" -exec sed -i '1,6s/^title: \([^"]*\):\([^"]*\)$/title: "\1:\2"/g' {} \;
          find . -name "*.md" -exec sed -i '1,6s/^sidebar_label: \([^"]*\):\([^"]*\)$/sidebar_label: "\1:\2"/g' {} \;
          find . -name "*.md" -exec sed -i '/!\[.*\](.*)/d' {} \;
          find . -name "*.md" -exec sed -i '/<img.*>/d' {} \;
          find . -name "*.md" -exec sed -i '/```jsx/,/```/d' {} \;
          find . -name "*.md" -exec sed -i '/```javascript/,/```/d' {} \;
          find . -name "*.md" -exec sed -i '/```js/,/```/d' {} \;
          find . -name "*.md" -exec sed -i 's/{[^}]*}//g' {} \;

      - name: Install Docusaurus dependencies
        run: |
          cd kai-docs-temp
          npm install --no-save @docusaurus/core@3.7.0 @docusaurus/preset-classic@3.7.0 @mdx-js/react@3.0.0 clsx@2.1.0 prism-react-renderer@2.3.1 react@18.2.0 react-dom@18.2.0 typescript@5.3.3

      - name: Build Docusaurus site
        run: |
          cd kai-docs-temp
          npx docusaurus build

      - name: Create Pull Request
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          
          # Checkout target repository
          git clone https://github.com/Basilakis/basilakis.github.io.git target-repo
          cd target-repo
          
          # Create a new branch
          BRANCH_NAME="docs-update-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Copy the built files
          rm -rf * || true
          cp -r ../kai-docs-temp/build/* .
          
          # Commit and push
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Deploy Documentation: ${{ github.event.inputs.deploy_message }}"
          git push https://x-access-token:${{ secrets.DOCS_DEPLOY_TOKEN }}@github.com/Basilakis/basilakis.github.io.git $BRANCH_NAME
          
          # Create PR
          gh auth login --with-token <<< "${{ secrets.DOCS_DEPLOY_TOKEN }}"
          gh pr create --title "Deploy Documentation: ${{ github.event.inputs.deploy_message }}" --body "This PR was automatically created by the GitHub Actions workflow to update the documentation site." --repo Basilakis/basilakis.github.io --head $BRANCH_NAME --base gh-pages
