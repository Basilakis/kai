name: Docusaurus Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          npm install -g fs-extra

      - name: Create Docusaurus site
        run: |
          # Create a temporary directory for the documentation site
          mkdir -p kai-docs-temp
          cd kai-docs-temp

          # Create a package.json file without workspace references
          echo '{
            "name": "kai-documentation",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "docusaurus": "docusaurus",
              "start": "docusaurus start",
              "build": "docusaurus build",
              "swizzle": "docusaurus swizzle",
              "deploy": "docusaurus deploy",
              "clear": "docusaurus clear",
              "serve": "docusaurus serve",
              "write-translations": "docusaurus write-translations",
              "write-heading-ids": "docusaurus write-heading-ids"
            },
            "dependencies": {
              "@docusaurus/core": "3.7.0",
              "@docusaurus/preset-classic": "3.7.0",
              "@mdx-js/react": "3.0.0",
              "clsx": "2.1.0",
              "prism-react-renderer": "2.3.1",
              "react": "18.2.0",
              "react-dom": "18.2.0"
            },
            "devDependencies": {
              "@docusaurus/module-type-aliases": "3.7.0",
              "@docusaurus/types": "3.7.0",
              "typescript": "5.3.3"
            },
            "browserslist": {
              "production": [
                ">0.5%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            },
            "engines": {
              "node": ">=18.0"
            }
          }' > package.json

          # Create a basic tsconfig.json file
          echo '{
            "compilerOptions": {
              "target": "es2020",
              "lib": ["dom", "dom.iterable", "esnext"],
              "allowJs": true,
              "skipLibCheck": true,
              "esModuleInterop": true,
              "allowSyntheticDefaultImports": true,
              "strict": true,
              "forceConsistentCasingInFileNames": true,
              "noFallthroughCasesInSwitch": true,
              "module": "esnext",
              "moduleResolution": "node",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "jsx": "react-jsx"
            },
            "include": ["src", "docs"]
          }' > tsconfig.json

          # Create directories
          mkdir -p docs src/css static/img

          # Create custom CSS
          echo '/**
           * Any CSS included here will be global. The classic template
           * bundles Infima by default. Infima is a CSS framework designed to
           * work well for content-centric websites.
           */

          /* You can override the default Infima variables here. */
          :root {
            --ifm-color-primary: #2e8555;
            --ifm-color-primary-dark: #29784c;
            --ifm-color-primary-darker: #277148;
            --ifm-color-primary-darkest: #205d3b;
            --ifm-color-primary-light: #33925d;
            --ifm-color-primary-lighter: #359962;
            --ifm-color-primary-lightest: #3cad6e;
            --ifm-code-font-size: 95%;
            --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.1);
          }

          /* For readability concerns, you should choose a lighter palette in dark mode. */
          [data-theme="dark"] {
            --ifm-color-primary: #25c2a0;
            --ifm-color-primary-dark: #21af90;
            --ifm-color-primary-darker: #1fa588;
            --ifm-color-primary-darkest: #1a8870;
            --ifm-color-primary-light: #29d5b0;
            --ifm-color-primary-lighter: #32d8b4;
            --ifm-color-primary-lightest: #4fddbf;
            --docusaurus-highlighted-code-line-bg: rgba(0, 0, 0, 0.3);
          }

          /* Sidebar styles */
          .menu__link {
            font-size: 0.9rem;
          }

          .menu__list-item-collapsible {
            font-weight: bold;
          }

          /* Document styles */
          article {
            max-width: 900px;
            margin: 0 auto;
          }

          /* Code block styles */
          .prism-code {
            font-size: 0.9rem;
          }' > src/css/custom.css

          # Create placeholder logo
          echo '<svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
            <rect width="200" height="200" fill="#2e8555" />
            <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-family="Arial" font-size="72" fill="white">KAI</text>
          </svg>' > static/img/logo.svg

          # Create empty sidebars.js
          echo '/** @type {import("@docusaurus/plugin-content-docs").SidebarsConfig} */
          export default {
            tutorialSidebar: []
          };' > sidebars.js

          # Create Docusaurus config file
          echo '// @ts-check
          import {themes as prismThemes} from "prism-react-renderer";

          /** @type {import("@docusaurus/types").Config} */
          const config = {
            title: "KAI Documentation",
            tagline: "Comprehensive documentation for the KAI project",
            favicon: "img/favicon.ico",
            url: "https://basilakis.github.io",
            baseUrl: "/kai-readme.github.io/",
            organizationName: "Basilakis",
            projectName: "kai-readme.github.io",
            trailingSlash: false,
            onBrokenLinks: "warn",
            onBrokenMarkdownLinks: "warn",
            i18n: {
              defaultLocale: "en",
              locales: ["en"],
            },
            presets: [
              [
                "classic",
                /** @type {import("@docusaurus/preset-classic").Options} */
                ({
                  docs: {
                    sidebarPath: "./sidebars.js",
                    routeBasePath: "/",
                  },
                  blog: false,
                  theme: {
                    customCss: "./src/css/custom.css",
                  },
                }),
              ],
            ],
            themeConfig:
              /** @type {import("@docusaurus/preset-classic").ThemeConfig} */
              ({
                navbar: {
                  title: "KAI Documentation",
                  logo: {
                    alt: "KAI Logo",
                    src: "img/logo.svg",
                  },
                  items: [
                    {
                      href: "https://github.com/Basilakis/kai",
                      label: "GitHub",
                      position: "right",
                    },
                  ],
                },
                footer: {
                  style: "dark",
                  links: [
                    {
                      title: "More",
                      items: [
                        {
                          label: "GitHub",
                          href: "https://github.com/Basilakis/kai",
                        },
                      ],
                    },
                  ],
                  copyright: `Copyright Â© ${new Date().getFullYear()} KAI Project. Built with Docusaurus.`,
                },
                prism: {
                  theme: prismThemes.github,
                  darkTheme: prismThemes.dracula,
                },
              }),
          };

          export default config;' > docusaurus.config.js

          cd ..

      - name: Process readme files
        run: |
          mkdir -p kai-docs-temp/docs
          cd readme
          node process-readme-files.js

          # Additional fix for any problematic files
          cd ../kai-docs-temp/docs

          # Fix the specific problematic file by recreating it
          if [ -f "ai-ml/rag-system.md" ]; then
            echo "Recreating ai-ml/rag-system.md with proper front matter..."

            # Get the content without front matter (skip first 6 lines)
            CONTENT=$(tail -n +6 ai-ml/rag-system.md)

            # Create new file with proper front matter
            cat > ai-ml/rag-system.md << 'EOL'
---
id: rag-system
title: "RAG System: Architecture, Enhancements, and Integration Guide"
sidebar_label: "RAG System: Architecture, Enhancements, and Integration Guide"
---
EOL

            # Append the original content
            echo "$CONTENT" >> ai-ml/rag-system.md

            # Show the result
            echo "New front matter:"
            cat ai-ml/rag-system.md | head -5
          fi

          # Check for any other problematic files and fix them
          echo "Checking for other problematic files..."
          for file in $(find . -name "*.md"); do
            # Check if the file has a colon in the title without quotes
            if grep -q '^title: [^"].*:.*[^"]$' "$file"; then
              echo "Found problematic title in $file"

              # Extract the title
              TITLE=$(grep '^title:' "$file" | sed 's/^title: //')

              # Replace with quoted version
              sed -i "s/^title: $TITLE/title: \"$TITLE\"/" "$file"

              # Show the result
              echo "Fixed title in $file:"
              grep '^title:' "$file"
            fi

            # Check if the file has a colon in the sidebar_label without quotes
            if grep -q '^sidebar_label: [^"].*:.*[^"]$' "$file"; then
              echo "Found problematic sidebar_label in $file"

              # Extract the sidebar_label
              LABEL=$(grep '^sidebar_label:' "$file" | sed 's/^sidebar_label: //')

              # Replace with quoted version
              sed -i "s/^sidebar_label: $LABEL/sidebar_label: \"$LABEL\"/" "$file"

              # Show the result
              echo "Fixed sidebar_label in $file:"
              grep '^sidebar_label:' "$file"
            fi
          done

      - name: Install Docusaurus dependencies
        run: |
          cd kai-docs-temp
          # Install dependencies directly without using package.json
          npm install --no-save @docusaurus/core@3.7.0 @docusaurus/preset-classic@3.7.0 @mdx-js/react@3.0.0 clsx@2.1.0 prism-react-renderer@2.3.1 react@18.2.0 react-dom@18.2.0 typescript@5.3.3

      - name: Build Docusaurus site
        run: |
          cd kai-docs-temp
          # Use npx to run Docusaurus commands directly
          npx docusaurus build

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: kai-docs-temp/build
          repository-name: Basilakis/kai-readme.github.io
          clean: true
