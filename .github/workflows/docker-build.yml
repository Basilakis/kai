name: Build Docker Images

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to build for (production or staging)'
        required: true
        type: string
      tag-suffix:
        description: 'Suffix for Docker image tags, defaults to environment'
        required: false
        type: string
        default: ''
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true
      docker_registry:
        required: true

jobs:
  # First build the ML base image that other images depend on
  build-ml-base-image:
    name: Build ML Base Image
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ inputs.environment }}
      TAG_SUFFIX: ${{ inputs.tag-suffix || inputs.environment }}
      DOCKER_BUILDKIT: '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
          registry: ${{ secrets.docker_registry }}

      - name: Build and push ML base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.ml-base
          push: true
          tags: |
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-ml-base:${{ github.sha }}
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-ml-base:${{ env.TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-ml-base:${{ env.TAG_SUFFIX }}-cache
          cache-to: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-ml-base:${{ env.TAG_SUFFIX }}-cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ env.DEPLOY_ENV }}

  # Build the Node.js base image that Node.js services depend on
  build-node-base-image:
    name: Build Node.js Base Image
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ inputs.environment }}
      TAG_SUFFIX: ${{ inputs.tag-suffix || inputs.environment }}
      DOCKER_BUILDKIT: '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
          registry: ${{ secrets.docker_registry }}

      - name: Build and push Node.js base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.node-base
          push: true
          tags: |
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-node-base:${{ github.sha }}
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-node-base:${{ env.TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-node-base:${{ env.TAG_SUFFIX }}-cache
          cache-to: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-node-base:${{ env.TAG_SUFFIX }}-cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ env.DEPLOY_ENV }}

  # Build the Python base image that non-GPU Python services depend on
  build-python-base-image:
    name: Build Python Base Image
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ inputs.environment }}
      TAG_SUFFIX: ${{ inputs.tag-suffix || inputs.environment }}
      DOCKER_BUILDKIT: '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
          registry: ${{ secrets.docker_registry }}

      - name: Build and push Python base image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.python-base
          push: true
          tags: |
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-python-base:${{ github.sha }}
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-python-base:${{ env.TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-python-base:${{ env.TAG_SUFFIX }}-cache
          cache-to: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-python-base:${{ env.TAG_SUFFIX }}-cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ env.DEPLOY_ENV }}

  # Then build all service images, which may depend on any of the base images
  build-service-images:
    name: Build Service Images
    needs: [build-ml-base-image, build-node-base-image, build-python-base-image]
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ inputs.environment }}
      TAG_SUFFIX: ${{ inputs.tag-suffix || inputs.environment }}
      DOCKER_BUILDKIT: '1'
    strategy:
      matrix:
        include:
          # Main services
          - name: api-server
            dockerfile: ./Dockerfile.api
            context: .
          - name: coordinator-service
            dockerfile: ./packages/coordinator/Dockerfile.coordinator
            context: .
          # ML workers
          - name: quality-assessment
            dockerfile: ./packages/ml/python/Dockerfile.quality-assessment
            context: .
          - name: image-preprocessing
            dockerfile: ./packages/ml/python/Dockerfile.image-preprocessing
            context: .
          - name: colmap-sfm
            dockerfile: ./packages/ml/python/Dockerfile.colmap-sfm
            context: .
          - name: point-cloud
            dockerfile: ./packages/ml/python/Dockerfile.point-cloud
            context: .
          - name: model-generator
            dockerfile: ./packages/ml/python/Dockerfile.model-generator
            context: .
          - name: diffusion-nerf
            dockerfile: ./packages/ml/python/Dockerfile.diffusion-nerf
            context: .
          - name: nerf-mesh-extractor
            dockerfile: ./packages/ml/python/Dockerfile.nerf-mesh-extractor
            context: .
          - name: format-converter
            dockerfile: ./packages/ml/python/Dockerfile.format-converter
            context: .
          - name: workflow-finalizer
            dockerfile: ./packages/ml/python/Dockerfile.workflow-finalizer
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
          registry: ${{ secrets.docker_registry }}

      - name: Build and push service image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-${{ matrix.name }}:${{ github.sha }}
            ${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-${{ matrix.name }}:${{ env.TAG_SUFFIX }}
          cache-from: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-${{ matrix.name }}:${{ env.TAG_SUFFIX }}-cache
          cache-to: type=registry,ref=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-${{ matrix.name }}:${{ env.TAG_SUFFIX }}-cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ env.DEPLOY_ENV }}
            ML_BASE_IMAGE=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-ml-base:${{ env.TAG_SUFFIX }}
            NODE_BASE_IMAGE=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-node-base:${{ env.TAG_SUFFIX }}
            PYTHON_BASE_IMAGE=${{ secrets.docker_registry }}/${{ secrets.docker_username }}/kai-python-base:${{ env.TAG_SUFFIX }}